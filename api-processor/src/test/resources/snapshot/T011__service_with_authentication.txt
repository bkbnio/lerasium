package io.bkbn.lerasium.generated.api.service

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm.HMAC256
import io.bkbn.lerasium.core.model.LoginRequest
import io.bkbn.lerasium.core.request.RequestContext
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Response
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.persistence.repository.UserRepository
import java.lang.System
import java.util.Date
import java.util.UUID
import kotlin.String
import kotlin.Unit

public object UserService {
  public suspend fun create(context: RequestContext, request: Create): Response {
    val result = UserRepository.create(context, request)
    return Response.from(result)
  }

  public suspend fun read(context: RequestContext, id: UUID): Response {
    val result = UserRepository.read(context, id)
    return Response.from(result)
  }

  public suspend fun update(
    context: RequestContext,
    id: UUID,
    request: Update,
  ): Response {
    val result = UserRepository.update(context, id, request)
    return Response.from(result)
  }

  public suspend fun delete(context: RequestContext, id: UUID): Unit {
    UserRepository.delete(context, id)
  }

  public suspend fun authenticate(request: LoginRequest): String {
    val actor = UserRepository.authenticate(request.username, request.password)
    val unsignedToken = JWT.create().apply {
      withAudience("http://0.0.0.0:8080/hello")
      withIssuer("http://0.0.0.0:8080/")
      withClaim("id", actor.id.toString())
      withExpiresAt(Date(System.currentTimeMillis() + 60000))
    }
    return unsignedToken.sign(HMAC256("secret"))
  }
}
