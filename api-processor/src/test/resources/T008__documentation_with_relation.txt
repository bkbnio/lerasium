package io.bkbn.lerasium.generated.api.docs

import io.bkbn.kompendium.core.metadata.DeleteInfo
import io.bkbn.kompendium.core.metadata.GetInfo
import io.bkbn.kompendium.core.metadata.PostInfo
import io.bkbn.kompendium.core.metadata.PutInfo
import io.bkbn.kompendium.core.plugin.NotarizedRoute
import io.bkbn.lerasium.api.util.ApiDocumentationUtils.getAllParameters
import io.bkbn.lerasium.api.util.ApiDocumentationUtils.idParameter
import io.bkbn.lerasium.generated.api.models.CountryModels.Create
import io.bkbn.lerasium.generated.api.models.CountryModels.Response
import io.bkbn.lerasium.generated.api.models.CountryModels.Update
import io.ktor.http.HttpStatusCode
import io.ktor.server.application.install
import io.ktor.server.routing.Route
import kotlin.Unit
import kotlin.collections.List

public object CountryDocumentation {
  internal fun Route.rootDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("Country")
      post = PostInfo.builder {
        summary("Create New Country")
        description("Persists a new Country in the database")
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.Created)
          description("Country saved successfully")
        }
        request {
          requestType<Create>()
          description("Country to persist")
        }
      }
    }
  }

  internal fun Route.idDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("Country")
      parameters = idParameter()
      get = GetInfo.builder {
        summary("Get Country by ID")
        description("Retrieves the specified Country by its ID")
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.OK)
          description("The Country with the specified ID")
        }
      }
      put = PutInfo.builder {
        summary("Update Country by ID")
        description("Updates the specified Country by its ID")
        request {
          requestType<Update>()
          description("Fields that can be updated on the Country")
        }
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.Created)
          description("Indicates that the Country was updated successfully")
        }
      }
      delete = DeleteInfo.builder {
        summary("Delete Country by ID")
        description("Deletes the specified Country by its ID")
        response {
          responseType<Unit>()
          responseCode(HttpStatusCode.NoContent)
          description("Indicates that the Country was deleted successfully")
        }
      }
    }
  }

  internal fun Route.usersRelationDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("Country")
      get = GetInfo.builder {
        summary("Get All Country Users")
        description("""
            |Retrieves a paginated list of Users entities associated
            |with the provided Country
            """.trimMargin())
        parameters(*getAllParameters().toTypedArray().plus(idParameter()))
        response {
          responseType<List<Response>>()
          responseCode(HttpStatusCode.OK)
          description("Paginated list of Country entities")
        }
      }
    }
  }
}
