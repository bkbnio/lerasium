package io.bkbn.lerasium.generated.api.docs

import io.bkbn.kompendium.core.metadata.DeleteInfo
import io.bkbn.kompendium.core.metadata.GetInfo
import io.bkbn.kompendium.core.metadata.PostInfo
import io.bkbn.kompendium.core.metadata.PutInfo
import io.bkbn.kompendium.core.plugin.NotarizedRoute
import io.bkbn.lerasium.api.util.ApiDocumentationUtils.idParameter
import io.bkbn.lerasium.core.model.LoginRequest
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Response
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.ktor.http.HttpStatusCode
import io.ktor.server.application.install
import io.ktor.server.routing.Route
import kotlin.Unit

public object UserDocumentation {
  internal fun Route.rootDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("User")
      post = PostInfo.builder {
        summary("Create New User")
        description("Persists a new User in the database")
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.Created)
          description("User saved successfully")
        }
        request {
          requestType<Create>()
          description("User to persist")
        }
      }
    }
  }

  internal fun Route.idDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("User")
      parameters = idParameter()
      get = GetInfo.builder {
        summary("Get User by ID")
        description("Retrieves the specified User by its ID")
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.OK)
          description("The User with the specified ID")
        }
      }
      put = PutInfo.builder {
        summary("Update User by ID")
        description("Updates the specified User by its ID")
        request {
          requestType<Update>()
          description("Fields that can be updated on the User")
        }
        response {
          responseType<Response>()
          responseCode(HttpStatusCode.Created)
          description("Indicates that the User was updated successfully")
        }
      }
      delete = DeleteInfo.builder {
        summary("Delete User by ID")
        description("Deletes the specified User by its ID")
        response {
          responseType<Unit>()
          responseCode(HttpStatusCode.NoContent)
          description("Indicates that the User was deleted successfully")
        }
      }
    }
  }

  internal fun Route.loginDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("User")
      post = PostInfo.builder {
        summary("Login")
        description("Authenticates the User")
        request {
          requestType<LoginRequest>()
          description("The username and password of the User")
        }
        response {
          responseType<Unit>()
          responseCode(HttpStatusCode.NoContent)
          description("Indicates successful authentication, token is returned in header")
        }
      }
    }
  }

  internal fun Route.authValidationDocumentation(): Unit {
    install(NotarizedRoute()) {
      tags = setOf("User")
      get = GetInfo.builder {
        summary("Auth Validation")
        description("Validate the current auth token")
        response {
          responseType<Unit>()
          responseCode(HttpStatusCode.NoContent)
          description("Auth validation response")
        }
        canRespond {
          responseType<Unit>()
          responseCode(HttpStatusCode.Unauthorized)
          description("Token is invalid")
        }
      }
    }
  }
}
