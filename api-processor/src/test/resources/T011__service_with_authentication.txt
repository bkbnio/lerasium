package io.bkbn.lerasium.generated.api.service

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm.HMAC256
import io.bkbn.lerasium.core.model.LoginRequest
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Response
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.persistence.repository.UserRepository
import java.lang.System
import java.util.Date
import java.util.UUID
import kotlin.String
import kotlin.Unit

public object UserService {
  public fun create(request: Create): Response {
    val result = UserRepository.create(request)
    return Response.from(result)
  }

  public fun read(id: UUID): Response {
    val result = UserRepository.read(id)
    return Response.from(result)
  }

  public fun update(id: UUID, request: Update): Response {
    val result = UserRepository.update(id, request)
    return Response.from(result)
  }

  public fun delete(id: UUID): Unit {
    UserRepository.delete(id)
  }

  public fun authenticate(request: LoginRequest): String {
    val actor = UserRepository.authenticate(request.username, request.password)
    val unsignedToken = JWT.create().apply {
      withAudience("http://0.0.0.0:8080/hello")
      withIssuer("http://0.0.0.0:8080/")
      withClaim("id", actor.id.toString())
      withExpiresAt(Date(System.currentTimeMillis() + 60000))
    }
    return unsignedToken.sign(HMAC256("secret"))
  }
}
