package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.WordsResponse
import java.util.UUID
import kotlin.String
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object WordsTable : UUIDTable("words") {
  public val word: Column<String> = varchar("word", 128).index()

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class WordsEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<WordsResponse> {
  public var word: String by WordsTable.word

  public var createdAt: LocalDateTime by WordsTable.createdAt

  public var updatedAt: LocalDateTime by WordsTable.updatedAt

  public override fun toResponse(): WordsResponse = with(::WordsResponse) {
    val propertiesByName = WordsEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        WordsResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@WordsEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<WordsEntity>(WordsTable)
}
