package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.BigNumResponse
import java.util.UUID
import kotlin.Long
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object BigNumTable : UUIDTable("big_num") {
  public val size: Column<Long> = long("size")

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class BigNumEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<BigNumResponse> {
  public var size: Long by BigNumTable.size

  public var createdAt: LocalDateTime by BigNumTable.createdAt

  public var updatedAt: LocalDateTime by BigNumTable.updatedAt

  public override fun toResponse(): BigNumResponse = with(::BigNumResponse) {
    val propertiesByName = BigNumEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        BigNumResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@BigNumEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<BigNumEntity>(BigNumTable)
}
