package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.OtherWordsResponse
import java.util.UUID
import kotlin.String
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object OtherWordsTable : UUIDTable("other_words") {
  public val wordy: Column<String> = varchar("wordy", 128)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class OtherWordsEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<OtherWordsResponse> {
  public var wordy: String by OtherWordsTable.wordy

  public var createdAt: LocalDateTime by OtherWordsTable.createdAt

  public var updatedAt: LocalDateTime by OtherWordsTable.updatedAt

  public override fun toResponse(): OtherWordsResponse = with(::OtherWordsResponse) {
    val propertiesByName = OtherWordsEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        OtherWordsResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@OtherWordsEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<OtherWordsEntity>(OtherWordsTable)
}
