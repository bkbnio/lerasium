package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.BookResponse
import java.util.UUID
import kotlin.String
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.SizedIterable
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object BookTable : UUIDTable("book") {
  public val title: Column<String> = varchar("title", 128)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class BookEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<BookResponse> {
  public var title: String by BookTable.title

  public var createdAt: LocalDateTime by BookTable.createdAt

  public var updatedAt: LocalDateTime by BookTable.updatedAt

  public val readers: SizedIterable<UserEntity> by UserEntity via BookReviewTable

  public override fun toResponse(): BookResponse = with(::BookResponse) {
    val propertiesByName = BookEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        BookResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@BookEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<BookEntity>(BookTable)
}
