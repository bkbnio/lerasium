package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.UserResponse
import java.util.UUID
import kotlin.String
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object UserTable : UUIDTable("user") {
  public val userInfo: Column<String> = varchar("super_important_field", 128)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class UserEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<UserResponse> {
  public var userInfo: String by UserTable.userInfo

  public var createdAt: LocalDateTime by UserTable.createdAt

  public var updatedAt: LocalDateTime by UserTable.updatedAt

  public override fun toResponse(): UserResponse = with(::UserResponse) {
    val propertiesByName = UserEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        UserResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@UserEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<UserEntity>(UserTable)
}
