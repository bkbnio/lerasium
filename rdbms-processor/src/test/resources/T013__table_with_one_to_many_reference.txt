package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.CountryResponse
import java.util.UUID
import kotlin.String
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.SizedIterable
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object CountryTable : UUIDTable("country") {
  public val name: Column<String> = varchar("name", 128)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class CountryEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<CountryResponse> {
  public var name: String by CountryTable.name

  public var createdAt: LocalDateTime by CountryTable.createdAt

  public var updatedAt: LocalDateTime by CountryTable.updatedAt

  public val users: SizedIterable<UserEntity> by UserEntity referrersOn UserTable.country

  public override fun toResponse(): CountryResponse = with(::CountryResponse) {
    val propertiesByName = CountryEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        CountryResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@CountryEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<CountryEntity>(CountryTable)
}
