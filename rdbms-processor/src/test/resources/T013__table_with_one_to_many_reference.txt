package io.bkbn.lerasium.generated.persistence.table

import io.bkbn.lerasium.core.converter.ConvertTo
import io.bkbn.lerasium.generated.domain.Country
import java.util.UUID
import kotlin.String
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.SizedIterable
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object CountryTable : UUIDTable("country") {
  public val name: Column<String> = varchar("name", 128)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class CountryEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), ConvertTo<Country> {
  public var name: String by CountryTable.name

  public var createdAt: LocalDateTime by CountryTable.createdAt

  public var updatedAt: LocalDateTime by CountryTable.updatedAt

  public val users: SizedIterable<UserEntity> by UserEntity referrersOn UserTable.country

  public override fun to(): Country = Country(
    id = this.id.value,
    name = this.name,
    users = this.users.map { it.to() },
  )

  public companion object : UUIDEntityClass<CountryEntity>(CountryTable)
}
