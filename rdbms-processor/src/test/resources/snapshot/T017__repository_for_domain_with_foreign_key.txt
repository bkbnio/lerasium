package io.bkbn.lerasium.generated.persistence.repository

import io.bkbn.lerasium.core.auth.CrudAction
import io.bkbn.lerasium.core.request.ActorRequestContext
import io.bkbn.lerasium.core.request.AnonymousRequestContext
import io.bkbn.lerasium.core.request.RequestContext
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.domain.UserDomain
import io.bkbn.lerasium.generated.persistence.config.PostgresConfig
import io.bkbn.lerasium.generated.persistence.table.UserTable
import io.bkbn.lerasium.generated.persistence.table._UserTable
import io.bkbn.lerasium.generated.persistence.table.user
import java.util.UUID
import org.komapper.core.dsl.Meta
import org.komapper.core.dsl.QueryDsl
import org.komapper.core.dsl.query.andThen
import org.komapper.core.dsl.query.single
import org.komapper.r2dbc.R2dbcDatabase

public object UserRepository {
  private val db: R2dbcDatabase = PostgresConfig.database

  private val resource: _UserTable = Meta.user

  public suspend fun create(context: RequestContext, request: Create): UserDomain =
      db.withTransaction {
    val result = db.runQuery {
      QueryDsl.insert(resource).single(
        UserTable(
          name = request.name,
          country = request.country,
        )
      )
    }
    policyEnforcement(context, result.id, CrudAction.READ)
    result.to()
  }

  public suspend fun read(context: RequestContext, id: UUID): UserDomain = db.withTransaction {
    policyEnforcement(context, id, CrudAction.READ)
    val result = db.runQuery {
      val query = QueryDsl.from(resource).where {
        resource.id eq id
      }
      query.single()
    }
    result.to()
  }

  public suspend fun update(
    context: RequestContext,
    id: UUID,
    request: Update,
  ): UserDomain = db.withTransaction {
    policyEnforcement(context, id, CrudAction.UPDATE)
    val result = db.runQuery {
      QueryDsl.update(resource)
        .set {
          request.name?.let { v -> it.name to v }
          request.country?.let { v -> it.country to v }
        }
        .where {
          resource.id eq id
        }
        .andThen(QueryDsl.from(resource).where { resource.id eq id }.single())
    }
    result.to()
  }

  public suspend fun delete(context: RequestContext, id: UUID) {
    db.withTransaction {
      policyEnforcement(context, id, CrudAction.DELETE)
      db.runQuery {
        QueryDsl.delete(resource).where { resource.id eq id }
      }
    }
  }

  private suspend fun policyEnforcement(
    context: RequestContext,
    resource: UUID,
    action: CrudAction,
  ) {
    // No policies were identified for resource, block will be empty
    when (context) {
      is AnonymousRequestContext -> {}
      is ActorRequestContext<*> -> when (context.actor) {
      }
    }
  }
}