package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.FactsResponse
import java.util.UUID
import kotlin.Boolean
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object FactsTable : UUIDTable("facts") {
  public val isFact: Column<Boolean> = bool("is_fact")

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class FactsEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<FactsResponse> {
  public var isFact: Boolean by FactsTable.isFact

  public var createdAt: LocalDateTime by FactsTable.createdAt

  public var updatedAt: LocalDateTime by FactsTable.updatedAt

  public override fun toResponse(): FactsResponse = with(::FactsResponse) {
    val propertiesByName = FactsEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        FactsResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@FactsEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<FactsEntity>(FactsTable)
}
