package test

import io.bkbn.lerasium.core.Domain
import io.bkbn.lerasium.rdbms.Table
import io.bkbn.lerasium.rdbms.ForeignKey
import io.bkbn.lerasium.core.auth.CrudAction
import io.bkbn.bouncer.core.rbacPolicy
import io.bkbn.lerasium.core.auth.RbacPolicyProvider
import io.bkbn.lerasium.core.Relation
import io.bkbn.lerasium.core.model.DomainProvider

@Domain("User")
@Table
@Policy("user")
interface User {
  val email: String
  val password: String
}

@Api
@Domain("OrganizationRole")
@Table
interface OrganizationRole {

  @Relation
  @ForeignKey
  val organization: DomainProvider<UUID, Organization>

  @Relation
  @ForeignKey
  val user: DomainProvider<UUID, User>

  val role: Type

  @Serializable
  enum class Type {
    ADMIN,
    MAINTAINER,
    CONTRIBUTOR
  }
}

@Api
@Domain("Organization")
@Table
interface Organization {
  val name: String
}

@Api
@Domain("Repository")
@Table
interface Repository {
  @Relation
  @ForeignKey
  val organization: DomainProvider<UUID, Organization>
  val name: String

  companion object {
    val userOrgRbac = object : RbacPolicyProvider<User, CrudAction, OrganizationRole, OrganizationRole.Type, Repository> {
      override val policy: RbacPolicy<User, CrudAction, OrganizationRole.Type, Repository> = rbacPolicy {
        can("Org admin can delete a repository", CrudAction.DELETE, OrganizationRole.Type.ADMIN) { _, _, _ -> true }
      }
    }
  }
}
