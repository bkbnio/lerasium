package test

import io.bkbn.bouncer.core.RbacPolicy
import io.bkbn.bouncer.core.rbacPolicy
import io.bkbn.lerasium.api.Api
import io.bkbn.lerasium.core.Domain
import io.bkbn.lerasium.core.auth.CrudAction
import io.bkbn.lerasium.core.auth.RbacPolicyProvider
import io.bkbn.lerasium.rdbms.Table
import io.bkbn.lerasium.core.Relation
import io.bkbn.lerasium.core.model.DomainProvider
import io.bkbn.lerasium.core.model.ForeignKey
import kotlinx.serialization.Serializable
import io.bkbn.lerasium.core.auth.Actor
import io.bkbn.lerasium.core.auth.Password
import io.bkbn.lerasium.core.auth.Username

@Api
@Actor
@Domain("User")
@Table(name = "users")
interface User : LerasiumDomain {
  @Username
  val email: String

  @Password
  @Sensitive
  val password: String
}

@Api
@Domain("OrganizationRole")
@Table
interface OrganizationRole {

  @Relation
  @ForeignKey
  val organization: DomainProvider<UUID, Organization>

  @Relation
  @ForeignKey
  val user: DomainProvider<UUID, User>

  val role: Type

  @Serializable
  enum class Type {
    ADMIN,
    MAINTAINER,
    CONTRIBUTOR
  }
}

@Api
@Domain("Organization")
@Table
interface Organization {
  val name: String

  companion object {
    val userRbac =
      object : RbacPolicyProvider<User, CrudAction, OrganizationRole, OrganizationRole.Type, Organization> {
        override val policy: RbacPolicy<User, CrudAction, OrganizationRole.Type, Organization> = rbacPolicy {
          can(
            "Admin can always delete an organization",
            CrudAction.DELETE,
            OrganizationRole.Type.ADMIN
          ) { _, _, _ -> true }
        }
      }
  }
}

