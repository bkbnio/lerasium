package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.FloatyResponse
import java.util.UUID
import kotlin.Float
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object FloatyTable : UUIDTable("floaty") {
  public val pointyNum: Column<Float> = float("pointy_num")

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class FloatyEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<FloatyResponse> {
  public var pointyNum: Float by FloatyTable.pointyNum

  public var createdAt: LocalDateTime by FloatyTable.createdAt

  public var updatedAt: LocalDateTime by FloatyTable.updatedAt

  public override fun toResponse(): FloatyResponse = with(::FloatyResponse) {
    val propertiesByName = FloatyEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        FloatyResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@FloatyEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<FloatyEntity>(FloatyTable)
}
