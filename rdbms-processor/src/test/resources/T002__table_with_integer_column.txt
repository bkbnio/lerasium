package io.bkbn.lerasium.generated.persistence.entity

import io.bkbn.lerasium.core.model.Entity
import io.bkbn.lerasium.generated.models.CounterResponse
import java.util.UUID
import kotlin.Int
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.valueParameters
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object CounterTable : UUIDTable("counter") {
  public val count: Column<Int> = integer("count")

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class CounterEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), Entity<CounterResponse> {
  public var count: Int by CounterTable.count

  public var createdAt: LocalDateTime by CounterTable.createdAt

  public var updatedAt: LocalDateTime by CounterTable.updatedAt

  public override fun toResponse(): CounterResponse = with(::CounterResponse) {
    val propertiesByName = CounterEntity::class.memberProperties.associateBy { it.name }
    val params = valueParameters.associateWith {
      when (it.name) {
        CounterResponse::id.name -> id.value
        else -> propertiesByName[it.name]?.get(this@CounterEntity)
      }
    }
    callBy(params)
  }

  public companion object : UUIDEntityClass<CounterEntity>(CounterTable)
}
