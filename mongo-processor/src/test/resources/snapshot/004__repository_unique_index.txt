package io.bkbn.lerasium.generated.persistence.repository

import io.bkbn.lerasium.core.request.RequestContext
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.domain.UserDomain
import io.bkbn.lerasium.generated.persistence.config.MongoConfig
import io.bkbn.lerasium.generated.persistence.document.UserDocument
import java.util.UUID
import kotlinx.coroutines.runBlocking
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.litote.kmongo.coroutine.CoroutineCollection
import org.litote.kmongo.coroutine.CoroutineDatabase

public object UserRepository {
  private val db: CoroutineDatabase = MongoConfig.documentDatabase

  private val collection: CoroutineCollection<UserDocument> = db.getCollection()

  init {
    runBlocking {
      collection.ensureUniqueIndex(UserDocument::name)
    }
  }

  public suspend fun create(context: RequestContext, request: Create): UserDomain {
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    val document = UserDocument(
      id = UUID.randomUUID(),
      name = request.name,
      createdAt = now,
      updatedAt = now,
    )
    collection.save(document)
    return document.to()
  }

  public suspend fun read(context: RequestContext, id: UUID): UserDomain {
    val document = collection.findOneById(id) ?: error("""Unable to get entity with id: $id""")
    return document.to()
  }

  public suspend fun update(
    context: RequestContext,
    id: UUID,
    request: Update,
  ): UserDomain {
    val document = collection.findOneById(id) ?: error("""Unable to get entity with id: $id""")
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    document.apply {
      request.name?.let { name = it }
    }
    document.updatedAt = now
    collection.save(document)
    return document.to()
  }

  public suspend fun delete(context: RequestContext, id: UUID) {
    collection.deleteOneById(id)
  }
}