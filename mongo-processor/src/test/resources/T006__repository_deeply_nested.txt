package io.bkbn.lerasium.generated.persistence.repository

import com.mongodb.client.MongoCollection
import com.mongodb.client.MongoDatabase
import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.domain.User
import io.bkbn.lerasium.generated.persistence.config.MongoConfig
import io.bkbn.lerasium.generated.persistence.document.UserDocument
import io.bkbn.lerasium.generated.persistence.document.UserDocument.UserPreferencesDocument
import io.bkbn.lerasium.generated.persistence.document.UserDocument.UserPreferencesDocument.UserStuffDocument
import io.bkbn.lerasium.generated.persistence.document.UserDocument.UserPreferencesDocument.UserStuffDocument.UserInfoDocument
import java.util.UUID
import kotlin.Unit
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.litote.kmongo.deleteOneById
import org.litote.kmongo.findOneById
import org.litote.kmongo.getCollection
import org.litote.kmongo.save

public object UserRepository {
  private val db: MongoDatabase = MongoConfig.documentDatabase

  private val collection: MongoCollection<UserDocument> = db.getCollection()

  public fun create(request: Create): User {
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    val document = UserDocument(
      id = UUID.randomUUID(),
      preferences = request.preferences.let { preferences ->
        UserPreferencesDocument(
          stuff = preferences.stuff.let { stuff ->
            UserStuffDocument(
              info = stuff.info.let { info ->
                UserInfoDocument(
                  isCool = info.isCool,
                )
              },
            )
          },
        )
      },
      createdAt = now,
      updatedAt = now,
    )
    return document.to()
  }

  public fun read(id: UUID): User {
    val document = collection.findOneById(id) ?: error("""Unable to get entity with id: $id""")
    return document.to()
  }

  public fun update(id: UUID, request: Update): User {
    val document = collection.findOneById(id) ?: error("""Unable to get entity with id: $id""")
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    document.apply {
      request.preferences?.let {
        preferences.apply {
          it.stuff?.let {
            stuff.apply {
              it.info?.let {
                info.apply {
                  it.isCool?.let { isCool = it }
                }
              }
            }
          }
        }
      }
    }
    document.updatedAt = now
    collection.save(document)
    return document.to()
  }

  public fun delete(id: UUID): Unit {
    collection.deleteOneById(id)
  }
}
