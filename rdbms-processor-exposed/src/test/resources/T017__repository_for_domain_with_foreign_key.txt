package io.bkbn.lerasium.generated.persistence.repository

import io.bkbn.lerasium.generated.api.models.UserModels.Create
import io.bkbn.lerasium.generated.api.models.UserModels.Update
import io.bkbn.lerasium.generated.domain.User
import io.bkbn.lerasium.generated.persistence.table.CountryEntity
import io.bkbn.lerasium.generated.persistence.table.UserEntity
import java.util.UUID
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.jetbrains.exposed.sql.transactions.transaction

public object UserRepository {
  public fun create(request: Create): User = transaction {
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    val entity = UserEntity.new {
      this.name = request.name
      this.country = CountryEntity.findById(request.country) ?: error("""Invalid foreign key""")
      this.createdAt = now
      this.updatedAt = now
    }
    entity.to()
  }

  public fun read(id: UUID): User = transaction {
    val entity = UserEntity.findById(id) ?: error("""Unable to get entity with id: $id""")
    entity.to()
  }

  public fun update(id: UUID, request: Update): User = transaction {
    val now = Clock.System.now().toLocalDateTime(TimeZone.UTC)
    val entity = UserEntity.findById(id) ?: error("""Unable to get entity with id: $id""")
    request.name?.let { entity.name = it }
    request.country?.let { entity.country = CountryEntity.findById(it) ?:
        error("""Unable to get entity with id: $it""") }
    entity.updatedAt = now
    entity.to()
  }

  public fun delete(id: UUID) = transaction {
    val entity = UserEntity.findById(id) ?: error("""Unable to get entity with id: $id""")
    entity.delete()
  }
}
