package io.bkbn.lerasium.generated.persistence.table

import io.bkbn.lerasium.core.converter.ConvertTo
import io.bkbn.lerasium.generated.domain.User
import java.util.UUID
import kotlin.String
import kotlinx.datetime.LocalDateTime
import org.jetbrains.exposed.dao.UUIDEntity
import org.jetbrains.exposed.dao.UUIDEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.UUIDTable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.kotlin.datetime.datetime

public object UserTable : UUIDTable("user") {
  public val name: Column<String> = varchar("name", 128)

  public val country: Column<EntityID<UUID>> = reference("country", CountryTable)

  public val createdAt: Column<LocalDateTime> = datetime("created_at")

  public val updatedAt: Column<LocalDateTime> = datetime("updated_at")
}

public class UserEntity(
  id: EntityID<UUID>,
) : UUIDEntity(id), ConvertTo<User> {
  public var name: String by UserTable.name

  public var country: CountryEntity by CountryEntity referencedOn UserTable.country

  public var createdAt: LocalDateTime by UserTable.createdAt

  public var updatedAt: LocalDateTime by UserTable.updatedAt

  public override fun to(): User = User(
    id = this.id.value,
    name = this.name,
    country = this.country.to(),
  )

  public companion object : UUIDEntityClass<UserEntity>(UserTable)
}
